DatabaseModel = require('./databasemodel').DatabaseModel
Q = require('../q')

class ExtendedField extends DatabaseModel
    @describeModel: {
        type: @,
        fields: {
            type: 'string',
            key: 'string',
            value: '',
            createdAt: { autoGenerated: true, event: 'created' },
            updatedAt: { autoGenerated: true, event: 'updated' }
        },
    }

class ExtensibleModel extends DatabaseModel

    getExtendedField = (obj, name, context, db) ->
        { context, db } = obj.getContext context, db
        desc = obj.constructor.getModelDescription()
        fieldName = if desc.extendedFieldPrefix then "#{desc.extendedFieldPrefix}.#{name}" else name
        (Q.async =>
            yield desc.extendedFieldType.get { type: fieldName, key: obj._id.toString() }, context, db
        )()        
        


    getField: (name, context, db) =>
        (Q.async =>
            (yield getExtendedField @, name, context, db).value
        )()        



    saveField: (name, value, context, db) =>
        { context, db } = @getContext context, db

        desc = @constructor.getModelDescription()
        fieldName = if desc.extendedFieldPrefix then "#{desc.extendedFieldPrefix}.#{name}" else name
        
        (Q.async =>
            extendedField = yield getExtendedField @, name, context, db
            extendedField ?= new desc.extendedFieldType {
                type: fieldName,
                key: @_id.toString()
            }
            extendedField.value = value
            yield extendedField.save context, db
        )()        

    
    
    deleteField: (name, context, db) =>
        (Q.async =>
            extendedField = yield getExtendedField @, name, context, db
            yield extendedField?.destroy()
        )()        

        
exports.ExtendedField = ExtendedField
exports.ExtensibleModel = ExtensibleModel
