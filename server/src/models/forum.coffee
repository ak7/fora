BaseModel = require('./basemodel').BaseModel
Q = require('../common/q')

class Forum extends BaseModel

    class Settings extends BaseModel
        @describeModel: ->
            {
                type: Settings,
                fields: {
                    about: { 
                        type: 'object', 
                        fields: { opened: { type: 'boolean', required: false } },
                        required: false
                    },
                    comments: {
                        type: 'object',
                        required: false,
                        fields: {
                            enabled: { type: 'boolean', required: false },
                            opened: { type: 'boolean', required: false }
                        }
                    }
                }
            }    
            
            
        
    class Summary extends BaseModel    
        @describeModel: ->
            {
                type: Summary,
                fields: {
                    id: 'string',
                    network: 'string',
                    name: 'string',
                    stub: 'string',
                    createdBy: @getModels().User.Summary
                }
            }    
    
    @Settings: Settings
        
    @Summary: Summary
    
    @describeModel: ->
        {
            type: Forum,
            collection: 'forums',
            fields: {
                network: 'string',
                name: 'string',
                stub: 'string',
                about: { type: 'string', required: false }, 
                settings: { type: Settings, validate: -> @settings.validate() },
                icon: 'string',
                iconThumbnail: 'string',
                cover: { type: 'string', required: false },
                createdBy: { type: @getModels().User.Summary, validate: -> @createdBy.validate() },
                admins: {
                    type: 'array', 
                    contents: type: @getModels().User.Summary,
                    validate: -> 
                        if @admins.length
                            m.validate() for m in @admins
                },
                moderators: {
                    type: 'array', 
                    contents: type: @getModels().User.Summary,
                    validate: -> 
                        if @moderators.length
                            m.validate() for m in @moderators
                },
                snapshot: 'object',
                totalItems: 'number',
                totalSubscribers: 'number',
                lastPost: 'number', 
                createdAt: { autoGenerated: true, event: 'created' },
                updatedAt: { autoGenerated: true, event: 'updated' }
            },
            logging: {
                isLogged: true,
                onInsert: 'NEW_FORUM'
            }
        }
        

    constructor: (params) ->
        super
        @totalItems ?= 0
        @totalSubscribers ?= 0
        @settings ?= {}
        @moderators ?= []
        @snapshot ?= { posts: [] }
        @lastPost ?= 0
        

        
    summarize: =>        
        summary = new Summary {
            id: @_id.toString()
            network: @network,
            name: @name,
            stub: @stub,
            createdBy: @createdBy
        }
        
        
    getView: (name = "standard") =>
        switch name
            when 'card'
                {
                    id: @_id.toString()
                    @network,
                    @name,
                    @stub,
                    @createdBy,
                    @snapshot,
                    image: @icon
                }
                

    canWrite: (user) =>
        (Q.async =>
            #If admin or moderator, you can write without needing membership.
            if (u for u in @admins when u.id is user.id)
                return true
            if (u for u in @moderators when u.id is user.id)
                return true
            
            membership = yield @getModels().Membership.get { 'forum.id': @_id.toString() , 'user.id': user.id }, context, db
            @snapshot = { posts: p.getView("snapshot") for p in posts }
            if posts.length
                @lastPost = posts[0].publishedAt
            yield @save(context, db))()
        
        
        
    refreshSnapshot: (context, db) =>
        (Q.async =>
            posts = yield @getModels().Post.find({ 'forum.id': @_id.toString() , state: 'published' }, ((cursor) -> cursor.sort({ _id: -1 }).limit 10), context, db)
            @snapshot = { posts: p.getView("snapshot") for p in posts }
            if posts.length
                @lastPost = posts[0].publishedAt
            yield @save(context, db))()
            
    
exports.Forum = Forum
